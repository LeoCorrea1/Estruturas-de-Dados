Parte 1: Conceitos Fundamentais de Java e Orientação a Objetos

Tipos de Dados Primitivos e String: Qual a diferença entre os tipos de dados String, int e boolean em Java? Dê um exemplo de declaração e uso de cada um. (Originalmente Q4 - Colocado primeiro por ser básico para atributos)
Conceitos Essenciais de POO: Explique os seguintes conceitos de Programação Orientada a Objetos (POO) em Java:
a) Classe
b) Objeto
c) Atributo
d) Método
e) Encapsulamento (Originalmente Q1)
Construtores vs. Métodos: Qual a diferença entre um método e um construtor em uma classe Java? Dê um exemplo simples de uma classe com um construtor e um método. (Originalmente Q2)
Modificadores de Acesso: O que são modificadores de acesso em Java? Cite e explique brevemente os principais (public, private, protected, default/package-private). (Originalmente Q3)
Acesso a Atributos Privados: Descreva o que acontece quando se tenta acessar um atributo privado diretamente de fora da classe que o define. 
Como é a forma correta e segura de permitir o acesso controlado a esses atributos (princípio do encapsulamento)? (Originalmente Q6)
Método toString(): Explique o que é e para que serve o método toString() em uma classe Java. Qual sua utilidade ao trabalhar com objetos? (Originalmente Q5)

Parte 2: Exercícios Práticos - Implementação de Classes

Classe Produto:
Crie uma classe Produto com os atributos: nome (String), preco (double), quantidade (int).
Implemente um construtor para inicializar os atributos.
Implemente um método exibirInformacoes() que imprime os dados do produto no console.
Implemente um método calcularValorTotal() que retorna (não imprime) o valor total do produto em estoque (preco * quantidade).
Na main: Crie duas instâncias (objetos) da classe Produto. Um deles deve ter seus valores definidos diretamente no código, e o outro deve receber os valores via entrada do teclado.
Para cada produto, chame o método exibirInformacoes() e mostre também o resultado de calcularValorTotal(). (Originalmente Q7 - Adaptado para incluir construtor)
Classe Filme:
Crie uma classe Filme com os atributos: titulo (String), diretor (String), duracaoEmMinutos (int), genero (String).
Implemente um construtor para inicializar os atributos.
Crie um método exibirDetalhes() para mostrar todas as informações do filme formatadas no console.
Crie um método ehLongo() que retorna true se a duracaoEmMinutos do filme for maior que 120, e false caso contrário.
Na main: Peça ao usuário para digitar os dados de um filme (título, diretor, duração, gênero). Crie um objeto Filme com esses dados. 
Chame o método exibirDetalhes() e, em seguida, informe ao usuário se o filme é considerado longo ou não, utilizando o resultado do método ehLongo(). (Originalmente Q9 - Adaptado para incluir construtor)
Classe Usuario:
Crie uma classe Usuario com os atributos: nomeUsuario (String), senha (String), logado (boolean - deve ser inicializado como false).
Implemente um construtor que receba e inicialize nomeUsuario e senha.
Implemente um método login(String usuarioDigitado, String senhaDigitada) que compara os parâmetros recebidos com os atributos da classe.
Se ambos coincidirem, o método deve mudar o valor do atributo logado para true e retornar true. Caso contrário, deve garantir que logado seja false e retornar false.
Implemente um método logout() que simplesmente define o atributo logado como false.
Implemente um método exibirStatus() que imprime no console uma mensagem indicando se o usuário está "Logado" ou "Deslogado", baseado no valor do atributo logado.
Na main: Crie uma instância de Usuario com um nome de usuário e senha definidos diretamente no código. Peça ao usuário (via teclado) para digitar um nome de usuário e uma senha para tentar fazer o login.
Chame o método login(). Informe se o login foi bem-sucedido ou não. Chame exibirStatus(). Em seguida, chame o método logout() e chame exibirStatus() novamente para mostrar a mudança. (Originalmente Q8)
Classe Tarefa e Coleção:
Crie uma classe Tarefa com os atributos: descricao (String), concluida (boolean - deve ser inicializada como false).
Implemente um construtor que receba e inicialize a descricao.
Implemente um método concluirTarefa() que muda o valor do atributo concluida para true.
Implemente um método exibirTarefa() que imprime a descrição da tarefa seguida por seu status ("[ ] Pendente" ou "[X] Concluída").
Na main: Crie um vetor (array) ou ArrayList para armazenar 3 objetos do tipo Tarefa. Peça ao usuário para digitar a descrição de cada uma das 3 tarefas e crie os objetos, adicionando-os à coleção. 
Em seguida, peça ao usuário para escolher o índice (0, 1 ou 2) de uma tarefa para marcar como concluída e chame o método concluirTarefa() no objeto correspondente. Finalmente, percorra a coleção
e chame o método exibirTarefa() para cada tarefa, mostrando a lista completa com os status atualizados. (Originalmente Q10 - Reforçado o uso de coleção)
