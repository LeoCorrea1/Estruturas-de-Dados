Avaliação Parcial - Lista
A avaliação tem como objetivo verificar compreensão e domínio sobre a teoria de Estruturas de Dados com foco em Listas.

Realização e entrega
A avaliação deve ser respondida em arquivos .txt (contendo respostas das questões teóricas) e arquivos .java, ou .cs, ou .py (contendo os códigos das questões práticas). Esses arquivos serão entregues ao professor, dentro da pasta de cada aluno, com seu nome completo.

Questões
1- Explique e exemplifique os papéis de Listas, Pilhas, Filas, Árvores e Grafos em Sistemas de Informação.

Sao ferramentas fundamentais para organizar, armazenar e gerenciar infos de maneira eficiente, cada uma tem uma performance diferente , códigos para usa-las , porem servem para realizar a mesma tarefa

2- Qual a diferença entre Listas e Dicionários? Quando devemos usar um ou outro?

List ( ArrayList ) : quando precisa de acesso rápido a elementos por índice e a maioria das operações são adições ou remoções no final.
Dicionario ( HashMap ) : armazenar e acessar dados rapidamente usando pares chave-valor, e a ordem não é importante.


3- Ao usarmos listas de objetos com controle de duplicidade, precisamos reescrever o métodos equals() da classe que estamos implementando. Imagine uma classe Turma, em que há os atributos nome, cpf, dataNascimento. A partir daí, implemente a classe e reescreva o método equals() que use o atributo cpf com identficador (chave primária) da classe.

public class Turma {

    public String nome;
    public int cpf;
    public int DataNascimento;

    // Construtor que define nome, cpf e dataNascimento.
    public turma(int cpf, String nome , int dataNascimento) {
        this.nome = nome;
        this.cpf = cpf;
        this.dataNascimento = dataNascimento;

    // Compara dois alunos pelo cpf (único)
    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        Turma aluno = (Turma) o;
        return Objetos.equals(this.cpf, aluno.cpf);
    }

    // Gera hash baseado no cpf
    @Override
    public int hashCode() {
        return Objects.hash(this.cpf);
    }



4 - Em sua linguagem de preferência, crie um programa (usando funções/métodos) que:

preencha N nomes de equipes de futebol, obrigatóriamente em maiúsculo. Esses nomes devem ser armazenados em um dicionário que se possa controlar duplicados.
exiba os nomes das equipes cadastradas
exiba a quantidade de equipes cadastradas
Em sua linguagem de preferência, crie um programa que manipule objetos cidades baseados na classe Cidade, contendo, nome da cidade e sigla do estado do Brasil. O controle de duplicidade deve ser via o nome da cidade. O programa deve apresentar um pequeno Menu, em que o usuário possa:


5- cadastrar cidades: nome completo em maiúsculo e a sigla em maiúsculo
listar as cidades cadastradas tendo como ordem de ordenação os nomes das cidades
pesquisar uma cidade por seu nome e mostrar o seu estado respectivo (no caso, sigla)
remover uma cidade, pesquisando-a por seu nome
finalizar o programa